{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import pickle\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "class TurnoverClassifier():\n",
        "  def __init__(self):\n",
        "    self.model = None\n",
        "    self.feature_names = [\n",
        "        'Age', 'Gender', 'MaritalStatus', 'Travelling', 'Vertical', 'Qualification', 'EducationField', 'EmployeSatisfaction',\n",
        "        'JobEngagement', 'JobLevel', 'JobSatisfaction', 'Role', 'DailyBilling', 'HourBilling', 'MonthlyBilling', 'MonthlyRate',\n",
        "        'Work Experience', 'OverTime', 'PercentSalaryHike', 'Last Rating', 'RelationshipSatisfaction', 'Hours', 'StockOptionLevel',\n",
        "        'TrainingTimesLastYear', 'Work&Life', 'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrentManager',\n",
        "        'DistanceFromHome',\n",
        "    ]\n",
        "    self.load_model()\n",
        "\n",
        "  def load_model(self):\n",
        "    with open(\"rf_model.pkl\", \"rb\") as f:\n",
        "        self.model = pickle.load(f)\n",
        "\n",
        "  def predict(self, input_data):\n",
        "    input_array = np.array(input_data).reshape(1, -1)\n",
        "    prediction = self.model.predict(input_array)\n",
        "    return \"Yes\" if prediction[0] == 1 else \"No\"\n",
        "\n",
        "def main():\n",
        "  st.title(\"💼 Employee Turnover Prediction App\")\n",
        "  st.write(\"Masukkan data karyawan untuk memprediksi kemungkinan turnover.\")\n",
        "\n",
        "  classifier = TurnoverClassifier()\n",
        "\n",
        "  age = st.slider(\"Age\", 18, 60, 30)\n",
        "  gender = st.selectbox(\"Gender\", [0, 1])  # 0=Female, 1=Male (misal)\n",
        "  marital_status = st.selectbox(\"Marital Status\", [0, 1, 2])  # 0=Single, 1=Married, 2=Divorced\n",
        "  travelling = st.selectbox(\"Travelling\", [0, 1, 2])  # encoded\n",
        "  vertical = st.selectbox(\"Vertical\", [0, 1, 2])  # encoded department\n",
        "  qualification = st.selectbox(\"Qualification\", [0, 1, 2, 3])  # encoded\n",
        "  education_field = st.selectbox(\"Education Field\", [0, 1, 2, 3])\n",
        "  satisfaction = st.slider(\"Employee Satisfaction\", 1, 5, 3)\n",
        "  engagement = st.slider(\"Job Engagement\", 1, 5, 3)\n",
        "  job_level = st.selectbox(\"Job Level\", [1, 2, 3, 4, 5])\n",
        "  job_satisfaction = st.slider(\"Job Satisfaction\", 1, 5, 3)\n",
        "  role = st.selectbox(\"Job Role\", [0, 1, 2, 3])\n",
        "  daily_billing = st.number_input(\"Daily Billing\", 100, 1000, 300)\n",
        "  hour_billing = st.slider(\"Hourly Billing\", 10, 100, 40)\n",
        "  monthly_billing = st.number_input(\"Monthly Billing\", 1000, 20000, 5000)\n",
        "  monthly_rate = st.number_input(\"Monthly Rate\", 1000, 20000, 8000)\n",
        "  work_exp = st.slider(\"Work Experience (years)\", 0, 40, 5)\n",
        "  overtime = st.selectbox(\"OverTime\", [0, 1])  # 0=No, 1=Yes\n",
        "  salary_hike = st.slider(\"Percent Salary Hike\", 0, 30, 10)\n",
        "  last_rating = st.slider(\"Last Performance Rating\", 1, 5, 3)\n",
        "  rel_satisfaction = st.slider(\"Relationship Satisfaction\", 1, 5, 3)\n",
        "  hours = st.slider(\"Working Hours\", 1, 24, 8)\n",
        "  stock_option = st.selectbox(\"Stock Option Level\", [0, 1])\n",
        "  training = st.slider(\"Training Times Last Year\", 0, 10, 3)\n",
        "  work_life = st.slider(\"Work-Life Balance\", 1, 4, 3)\n",
        "  years_at_company = st.slider(\"Years At Company\", 0, 40, 5)\n",
        "  in_role = st.slider(\"Years In Current Role\", 0, 20, 2)\n",
        "  since_promo = st.slider(\"Years Since Last Promotion\", 0, 15, 1)\n",
        "  with_manager = st.slider(\"Years With Current Manager\", 0, 20, 2)\n",
        "  distance = st.slider(\"Distance From Home\", 1, 30, 5)\n",
        "\n",
        "\n",
        "  input_data = [\n",
        "        age, gender, marital_status, travelling, vertical, qualification, education_field, satisfaction,\n",
        "        engagement, job_level, job_satisfaction, role, daily_billing, hour_billing, monthly_billing, monthly_rate,\n",
        "        work_exp, overtime, salary_hike, last_rating, rel_satisfaction, hours, stock_option,\n",
        "        training, work_life, years_at_company, in_role, since_promo, with_manager, distance\n",
        "  ]\n",
        "\n",
        "  if st.button(\"Predict Turnover\"):\n",
        "        result = classifier.predict(input_data)\n",
        "        st.success(f\"Prediction: The employee is likely to leave? **{result}**\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "HMYxAeS-7QF-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "outputId": "6faecbb5-e2f9-4f50-bb63-7e17253727f8"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'streamlit'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-e6cc37f8258a>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mstreamlit\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mst\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import pickle\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "class TurnoverClassifier:\n",
        "    def __init__(self):\n",
        "        self.columns = [\n",
        "            'Age', 'Gender', 'MaritalStatus', 'Travelling', 'Vertical', 'Qualification', 'EducationField', 'EmployeSatisfaction',\n",
        "            'JobEngagement', 'JobLevel', 'JobSatisfaction', 'Role', 'DailyBilling', 'HourBilling', 'MonthlyBilling', 'MonthlyRate',\n",
        "            'Work Experience', 'OverTime', 'PercentSalaryHike', 'Last Rating', 'RelationshipSatisfaction', 'Hours', 'StockOptionLevel',\n",
        "            'TrainingTimesLastYear', 'Work&Life', 'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrentManager',\n",
        "            'DistanceFromHome',\n",
        "        ]\n",
        "        self.model = None\n",
        "        self.df = None\n",
        "        self.label_encoders = {}\n",
        "\n",
        "    def load_data(self):\n",
        "        try:\n",
        "            self.df = pd.read_csv('/content/ideaspiceemployeeturnoverdatset.csv')\n",
        "        except FileNotFoundError:\n",
        "            self.df = None\n",
        "\n",
        "    def preprocess_data(self):\n",
        "        for col in self.df.columns:\n",
        "            if self.df[col].dtype == 'object':\n",
        "                le = LabelEncoder()\n",
        "                self.df[col] = le.fit_transform(self.df[col])\n",
        "                self.label_encoders[col] = le\n",
        "\n",
        "\n",
        "    def train_model(self):\n",
        "        self.load_data()\n",
        "        if self.df is None:\n",
        "            st.error(\"Dataset tidak ditemukan. Pastikan file 'turnover_data.csv' tersedia.\")\n",
        "            return\n",
        "\n",
        "        self.preprocess_data()\n",
        "        X = self.df[self.feature_names]\n",
        "        y = self.df['Turnover']\n",
        "\n",
        "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "        model = RandomForestClassifier()\n",
        "        model.fit(X_train, y_train)\n",
        "\n",
        "        y_pred = model.predict(X_test)\n",
        "        acc = accuracy_score(y_test, y_pred)\n",
        "        report = classification_report(y_test, y_pred)\n",
        "\n",
        "        st.subheader(\"🎯 Model Performance\")\n",
        "        st.write(f\"**Accuracy:** {acc:.2f}\")\n",
        "        st.text(\"Classification Report:\")\n",
        "        st.text(report)\n",
        "\n",
        "        with open(\"rf_model.pkl\", \"wb\") as f:\n",
        "            pickle.dump(model, f)\n",
        "\n",
        "        self.model = model\n",
        "        st.success(\"✅ Model berhasil dilatih dan disimpan.\")\n",
        "\n",
        "    def load_model(self):\n",
        "        try:\n",
        "            with open(\"rf_model.pkl\", \"rb\") as f:\n",
        "                self.model = pickle.load(f)\n",
        "        except FileNotFoundError:\n",
        "            self.model = None\n",
        "\n",
        "    def predict(self, input_data):\n",
        "        if self.model is None:\n",
        "            self.load_model()\n",
        "        if self.model is None:\n",
        "            return \"❌ Model belum dilatih atau file tidak ditemukan.\"\n",
        "        input_array = np.array(input_data).reshape(1, -1)\n",
        "        prediction = self.model.predict(input_array)\n",
        "        return \"Yes\" if prediction[0] == 1 else \"No\"\n",
        "\n",
        "# Streamlit App\n",
        "def main():\n",
        "    st.title(\"💼 Employee Turnover Prediction App\")\n",
        "    st.sidebar.title(\"Menu\")\n",
        "    menu = [\"Home\", \"Train Model\", \"Make Prediction\"]\n",
        "    choice = st.sidebar.selectbox(\"Navigation\", menu)\n",
        "\n",
        "    classifier = TurnoverClassifier()\n",
        "\n",
        "    if choice == \"Home\":\n",
        "        st.subheader(\"👋 Welcome\")\n",
        "        st.write(\"Gunakan aplikasi ini untuk melatih model dan memprediksi turnover karyawan.\")\n",
        "\n",
        "    elif choice == \"Train Model\":\n",
        "        st.subheader(\"🛠️ Train the Model\")\n",
        "        classifier.train_model()\n",
        "\n",
        "    elif choice == \"Make Prediction\":\n",
        "        st.subheader(\"🔍 Predict Employee Turnover\")\n",
        "\n",
        "        # Input\n",
        "        age = st.slider(\"Age\", 18, 60, 30)\n",
        "        gender = st.selectbox(\"Gender\", [0, 1])\n",
        "        marital_status = st.selectbox(\"Marital Status\", [0, 1, 2])\n",
        "        travelling = st.selectbox(\"Travelling\", [0, 1, 2])\n",
        "        vertical = st.selectbox(\"Vertical\", [0, 1, 2])\n",
        "        qualification = st.selectbox(\"Qualification\", [0, 1, 2, 3])\n",
        "        education_field = st.selectbox(\"Education Field\", [0, 1, 2, 3])\n",
        "        satisfaction = st.slider(\"Employee Satisfaction\", 1, 5, 3)\n",
        "        engagement = st.slider(\"Job Engagement\", 1, 5, 3)\n",
        "        job_level = st.selectbox(\"Job Level\", [1, 2, 3, 4, 5])\n",
        "        job_satisfaction = st.slider(\"Job Satisfaction\", 1, 5, 3)\n",
        "        role = st.selectbox(\"Job Role\", [0, 1, 2, 3])\n",
        "        daily_billing = st.number_input(\"Daily Billing\", 100, 1000, 300)\n",
        "        hour_billing = st.slider(\"Hourly Billing\", 10, 100, 40)\n",
        "        monthly_billing = st.number_input(\"Monthly Billing\", 1000, 20000, 5000)\n",
        "        monthly_rate = st.number_input(\"Monthly Rate\", 1000, 20000, 8000)\n",
        "        work_exp = st.slider(\"Work Experience (years)\", 0, 40, 5)\n",
        "        overtime = st.selectbox(\"OverTime\", [0, 1])\n",
        "        salary_hike = st.slider(\"Percent Salary Hike\", 0, 30, 10)\n",
        "        last_rating = st.slider(\"Last Performance Rating\", 1, 5, 3)\n",
        "        rel_satisfaction = st.slider(\"Relationship Satisfaction\", 1, 5, 3)\n",
        "        hours = st.slider(\"Working Hours\", 1, 24, 8)\n",
        "        stock_option = st.selectbox(\"Stock Option Level\", [0, 1])\n",
        "        training = st.slider(\"Training Times Last Year\", 0, 10, 3)\n",
        "        work_life = st.slider(\"Work-Life Balance\", 1, 4, 3)\n",
        "        years_at_company = st.slider(\"Years At Company\", 0, 40, 5)\n",
        "        in_role = st.slider(\"Years In Current Role\", 0, 20, 2)\n",
        "        since_promo = st.slider(\"Years Since Last Promotion\", 0, 15, 1)\n",
        "        with_manager = st.slider(\"Years With Current Manager\", 0, 20, 2)\n",
        "        distance = st.slider(\"Distance From Home\", 1, 30, 5)\n",
        "\n",
        "        input_data = [\n",
        "            age, gender, marital_status, travelling, vertical, qualification, education_field, satisfaction,\n",
        "            engagement, job_level, job_satisfaction, role, daily_billing, hour_billing, monthly_billing, monthly_rate,\n",
        "            work_exp, overtime, salary_hike, last_rating, rel_satisfaction, hours, stock_option,\n",
        "            training, work_life, years_at_company, in_role, since_promo, with_manager, distance\n",
        "        ]\n",
        "\n",
        "        if st.button(\"Predict\"):\n",
        "            result = classifier.predict(input_data)\n",
        "            st.success(f\"Prediction: The employee is likely to leave? **{result}**\")\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OjzXKs3f-uQH",
        "outputId": "6e27454f-e74f-48eb-8f6e-45efd42e2e67"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-05-13 09:50:29.817 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.830 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.835 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.843 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.851 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.852 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.856 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.857 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.861 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.862 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.863 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.867 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.868 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-05-13 09:50:29.868 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Opy7e5e2CwO3"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
